import 'dart:convert';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:injectable/injectable.dart';
import '../../core/constants/app_constants.dart';
import '../../domain/entities/user_preferences.dart';
import '../../domain/entities/language_pack.dart';
import '../models/language_pack_model.dart';

@injectable
class LocalStorageDataSource {
  static const String _userPrefsKey = 'user_preferences';
  static const String _languagePacksBoxName = 'language_packs';

  late Box<LanguagePackModel> _languagePacksBox;
  bool _isInitialized = false;

  Future<void> initialize() async {
    if (_isInitialized) return;

    await Hive.initFlutter();

    // Register adapters (these will be generated by build_runner)
    // Hive.registerAdapter(LanguagePackModelAdapter());

    _languagePacksBox = await Hive.openBox<LanguagePackModel>(
      _languagePacksBoxName,
    );
    _isInitialized = true;
  }

  Future<UserPreferences> getUserPreferences() async {
    final prefs = await SharedPreferences.getInstance();
    final prefsJson = prefs.getString(_userPrefsKey);

    if (prefsJson != null) {
      try {
        final prefsMap = json.decode(prefsJson) as Map<String, dynamic>;
        return UserPreferences.fromJson(prefsMap);
      } catch (e) {
        // If there's an error parsing, return default preferences
        return UserPreferences.defaultPreferences();
      }
    }

    return UserPreferences.defaultPreferences();
  }

  Future<void> saveUserPreferences(UserPreferences preferences) async {
    final prefs = await SharedPreferences.getInstance();
    final prefsJson = json.encode(preferences.toJson());
    await prefs.setString(_userPrefsKey, prefsJson);
  }

  Future<LanguagePack?> getLanguagePack(String languageCode) async {
    if (!_isInitialized) await initialize();

    final model = _languagePacksBox.get(languageCode);
    return model?.toEntity();
  }

  Future<void> saveLanguagePack(LanguagePack languagePack) async {
    if (!_isInitialized) await initialize();

    final model = LanguagePackModel.fromEntity(languagePack);
    await _languagePacksBox.put(languagePack.languageCode, model);
  }

  Future<List<LanguagePack>> getAllLanguagePacks() async {
    if (!_isInitialized) await initialize();

    return _languagePacksBox.values.map((model) => model.toEntity()).toList();
  }

  Future<void> clearLanguagePacks() async {
    if (!_isInitialized) await initialize();

    await _languagePacksBox.clear();
  }

  Future<void> deleteLanguagePack(String languageCode) async {
    if (!_isInitialized) await initialize();

    await _languagePacksBox.delete(languageCode);
  }

  Future<void> clearAllData() async {
    if (!_isInitialized) await initialize();

    // Clear SharedPreferences
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();

    // Clear Hive boxes
    await _languagePacksBox.clear();
  }

  Future<List<String>> getUserAllergies() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getStringList(AppConstants.userAllergiesKey) ?? [];
  }

  Future<void> saveUserAllergies(List<String> allergies) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList(AppConstants.userAllergiesKey, allergies);
  }

  Future<String> getUserLanguage() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(AppConstants.userLanguageKey) ?? 'en';
  }

  Future<void> saveUserLanguage(String languageCode) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(AppConstants.userLanguageKey, languageCode);
  }

  Future<bool> isFirstLaunch() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(AppConstants.firstLaunchKey) ?? true;
  }

  Future<void> setFirstLaunchCompleted() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(AppConstants.firstLaunchKey, false);
  }
}
